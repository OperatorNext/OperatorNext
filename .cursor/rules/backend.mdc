---
description: When asked about Python backend-related APIs
globs: 
---
You are an expert in FastAPI, Python, and AI/ML development with a focus on production-ready backend systems.

Key Principles
- Write clean, maintainable Python code following PEP 8 guidelines
- Use type hints and Pydantic models for data validation
- Implement proper error handling and logging
- Follow REST API best practices
- Write comprehensive docstrings and comments

Project Structure
- `api/`: Contains all API route handlers and endpoints
  - Organize routes by feature/domain
  - Use FastAPI Router for modular routing
  - Implement proper request/response models
  
- `core/`: Contains core business logic and configurations
  - Configuration management
  - Common utilities and constants
  - Core business logic implementations
  
- `models/`: Data models and database schemas
  - Pydantic models for request/response validation
  - SQLAlchemy models for database (if applicable)
  - Type definitions and enums
  
- `schemas/`: API schemas and data transfer objects
  - Request/Response schemas
  - Data validation schemas
  - API documentation schemas
  
- `services/`: Business logic and external service integrations
  - Separate business logic from API routes
  - Integration with external services
  - Reusable service components

Code Organization
- Use dependency injection for service dependencies
- Implement repository pattern for data access
- Keep route handlers thin, move business logic to services
- Use async/await for I/O-bound operations

FastAPI Best Practices
- Use proper status codes and error responses
- Implement proper request validation
- Use FastAPI dependency injection
- Implement proper API documentation
- Use background tasks for long-running operations

Error Handling
- Use custom exception handlers
- Implement proper error logging
- Return consistent error responses
- Handle edge cases appropriately

Security
- Implement proper authentication/authorization
- Use environment variables for sensitive data
- Implement rate limiting
- Follow OWASP security guidelines

Performance
- Use connection pooling for databases
- Implement caching where appropriate
- Use async operations for I/O-bound tasks
- Optimize database queries

Testing
- Write unit tests for business logic
- Implement integration tests for API endpoints
- Use pytest for testing
- Mock external dependencies

Documentation
- Write clear docstrings for all functions
- Document API endpoints using OpenAPI
- Maintain README and deployment docs
- Comment complex logic

Development Workflow
- Use virtual environments
- Follow Git branching strategy
- Use pre-commit hooks
- Implement CI/CD pipelines

Follow FastAPI documentation for best practices and patterns.
Use Python 3.9+ features when applicable.

# OperatorNext Backend 开发规范

## 核心原则

### 代码质量
- 严格遵循 PEP 8 编码规范
- 使用类型提示和 Pydantic 模型进行数据验证
- 代码复杂度控制：单个函数不超过 50 行
- 使用 ruff 和 mypy 进行代码质量检查
- 所有函数必须有文档字符串

### 异步编程
- 默认使用异步编程模式
- 长时间运行的任务使用后台任务
- 使用 asyncio 进行并发操作
- 避免同步阻塞操作
- 浏览器操作使用异步控制

### 错误处理
- 使用自定义异常类
- 实现全局异常处理器
- 统一的错误响应格式
- 详细的错误日志记录
- 关键操作需要添加重试机制

## 项目结构

### api/
```
api/
├── __init__.py
├── browser.py      # 浏览器控制相关接口
├── auth.py         # 认证相关接口
└── deps.py         # 依赖注入
```

- 路由使用 APIRouter 组织
- 路由处理函数保持简洁
- 使用依赖注入处理认证和授权
- 实现请求参数验证
- 使用适当的 HTTP 方法和状态码

### core/
```
core/
├── __init__.py
├── config.py       # 配置管理
├── security.py     # 安全相关
├── constants.py    # 常量定义
├── prompts.py      # LLM 提示词管理
└── utils/
    ├── __init__.py
    ├── logger.py   # 日志工具
    └── helpers.py  # 通用工具函数
```

- 使用 pydantic.BaseSettings 管理配置
- 实现环境变量验证
- 集中管理常量和工具函数
- 实现统一的日志记录
- LLM 提示词模板管理

### models/
```
models/
├── __init__.py
├── base.py        # 基础模型
├── agent.py       # Agent 模型
├── llm.py         # LLM 模型
└── browser.py     # 浏览器模型
```

- 使用 Pydantic 定义数据模型
- 实现数据验证和转换
- 定义清晰的类型提示
- 使用 SQLAlchemy 进行数据库操作
- 支持 LLM 和浏览器自动化模型

### schemas/
```
schemas/
├── __init__.py
├── base.py         # 基础模式
├── browser_task.py # 浏览器任务模式
└── responses.py    # 响应模式
```

- 定义请求和响应模式
- 实现数据验证规则
- 使用继承减少代码重复
- 提供详细的字段描述
- 支持 OpenAPI 文档生成

### services/
```
services/
├── __init__.py
├── browser/
│   ├── __init__.py
│   ├── service.py        # 核心服务
│   ├── callbacks.py      # 回调处理
│   ├── error_handler.py  # 错误处理
│   ├── metrics.py        # 指标收集
│   └── message_processor.py  # 消息处理
└── base.py              # 基础服务类
```

- 实现业务逻辑
- 处理外部服务集成
- 实现缓存和性能优化
- 处理异步操作
- 浏览器自动化服务实现

## 安全最佳实践

### 认证和授权
- 使用 JWT 进行身份验证
- 实现基于角色的访问控制
- 使用 OAuth2 处理第三方认证
- 实现 API 密钥管理
- 浏览器会话安全管理

### 数据安全
- 敏感数据加密存储
- 使用环境变量管理密钥
- 实现请求速率限制
- 防止 SQL 注入和 XSS
- 浏览器操作安全控制

## 性能优化

### 数据库
- 使用连接池
- 优化查询性能
- 实现数据库迁移
- 使用适当的索引
- 异步数据库操作

### 缓存
- 使用 Redis 缓存
- 实现缓存失效策略
- 缓存常用数据
- 避免缓存击穿
- LLM 响应缓存

## 测试规范

### 单元测试
- 使用 pytest 框架
- 测试覆盖率要求 > 80%
- 模拟外部依赖
- 使用工厂模式创建测试数据
- 浏览器操作模拟测试

### 集成测试
- 测试 API 端点
- 测试数据库操作
- 测试外部服务集成
- 使用测试容器
- 端到端浏览器测试

## 部署和监控

### CI/CD
- 使用 GitHub Actions
- 自动化测试和部署
- 版本管理和发布
- 代码质量检查
- 容器镜像构建

### 监控
- 使用 Prometheus 收集指标
- Grafana 面板可视化
- 实现健康检查
- 错误报警机制
- 浏览器性能监控

## 文档规范

### API 文档
- 使用 OpenAPI 规范
- 详细的接口说明
- 请求和响应示例
- 错误码说明
- WebSocket 接口文档

### 代码文档
- 清晰的注释
- 完整的文档字符串
- 架构说明
- 部署文档
- LLM 提示词文档

## 开发工作流

### 环境管理
- 使用 UV 管理虚拟环境
- 固定依赖版本
- 区分开发和生产环境
- 使用 Docker 容器化
- Python 3.11+ 支持

### 版本控制
- 使用 Git Flow 工作流
- 语义化版本号
- 清晰的提交信息
- 代码审查流程
- 分支保护策略

### 质量控制
- 使用 pre-commit hooks
- 自动化代码格式化
- 静态代码分析
- 性能基准测试
- 依赖更新检查