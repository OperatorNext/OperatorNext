services:
  postgres:
    image: postgres:16-alpine
    container_name: operatornext-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # 生产环境数据库配置
      PROD_USER: ${POSTGRES_USER}
      PROD_PASSWORD: ${POSTGRES_PASSWORD}
      PROD_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d operatornext_production" ]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: frontend
      dockerfile: apps/web/Dockerfile
    container_name: operatornext-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public"
      NEXT_PUBLIC_SITE_URL: "${NEXT_PUBLIC_SITE_URL}"
      BETTER_AUTH_SECRET: "${BETTER_AUTH_SECRET}"
      # 邮件服务配置
      MAIL_HOST: "maildev"
      MAIL_PORT: "1025"
      MAIL_USER: ""
      MAIL_PASS: ""
      # MinIO 存储配置
      S3_ACCESS_KEY_ID: "${MINIO_ROOT_USER}"
      S3_SECRET_ACCESS_KEY: "${MINIO_ROOT_PASSWORD}"
      S3_ENDPOINT: "http://minio:9000"
      NEXT_PUBLIC_AVATARS_BUCKET_NAME: "avatars"
      # OAuth 配置（需要在生产环境中设置）
      GITHUB_CLIENT_ID: "${GITHUB_CLIENT_ID}"
      GITHUB_CLIENT_SECRET: "${GITHUB_CLIENT_SECRET}"
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID}"
      GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET}"
      # Browserless 配置
      BROWSERLESS_URL: "http://chrome:3000"
      BROWSERLESS_TOKEN: "browser-token-2024"
      # VM 配置
      VM_VNC_URL: "vmhost:5900"
      VM_VNC_PASSWORD: "vncpassword"
      # Selenium 配置
      SELENIUM_URL: "http://selenium-hub:4444"
      SELENIUM_BROWSER: "chromium"
    depends_on:
      postgres:
        condition: service_healthy
      maildev:
        condition: service_started
      minio:
        condition: service_healthy
      chrome:
        condition: service_started
      vmhost:
        condition: service_started
      selenium-hub:
        condition: service_started

  # VM 虚拟机服务
  vmhost:
    build:
      context: ./backend/docker
      dockerfile: Dockerfile.vm
    container_name: operatornext-vmhost
    restart: unless-stopped
    ports:
      - "5901:5901"  # VNC 服务端口
      - "6080:6080"  # NoVNC 网页界面端口
    environment:
      - VNC_PASSWORD=ubuntu
    volumes:
      - vm_data:/home/ubuntu/data
    healthcheck:
      test: ["CMD", "pgrep", "Xtigervnc"]
      interval: 30s
      timeout: 10s
      retries: 3
    shm_size: '1gb'

  # Chrome 浏览器服务
  chrome:
    build:
      context: ./docker/browserless
      dockerfile: Dockerfile
    platform: linux/arm64
    container_name: operatornext-chrome
    environment:
      # 基础配置
      - MAX_CONCURRENT_SESSIONS=10
      - CONNECTION_TIMEOUT=300000
      - MAX_QUEUE_LENGTH=10
      - WORKSPACE_DIR=/tmp/workspace
      
      # 调试配置
      - DEBUG=browserless*
      
      # 安全配置
      - TOKEN=browser-token-2024
      - ENABLE_CORS=true
      - CORS_ALLOW_ORIGINS=http://localhost:3000,http://localhost:8000
      - ENABLE_API_GET=true
      - HOST=0.0.0.0
      - SWAGGER_SERVER=http://localhost:13000
      
      # 浏览器配置
      - DEFAULT_HEADLESS=true
      - DEFAULT_IGNORE_HTTPS_ERRORS=true
      - DEFAULT_USER_DATA_DIR=/tmp/browserless-data-dir
      - DOWNLOAD_DIR=/tmp/downloads
      
      # ESM模块支持
      - FUNCTION_ENABLE_ESMODULES=true
      - FUNCTION_EXTERNALS=["@faker-js/faker", "esm"]
      - ALLOW_GET=true
      - FUNCTION_BUILT_INS=["url"]
      - FUNCTION_ENV_VARS=[]

    shm_size: '2gb'
    ports:
      - "13000:3000"  # browserless HTTP 和 WebSocket 端口
      - "19222:9222"  # Chrome DevTools 端口
    networks:
      - default
    volumes:
      - browserless-data:/tmp/workspace
      - /dev/shm:/dev/shm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 可选: pgAdmin 管理工具
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: operatornext-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      postgres:
        condition: service_healthy

  # 邮件测试服务
  maildev:
    image: maildev/maildev
    container_name: operatornext-mail
    ports:
      - "${MAILDEV_SMTP_PORT}:1025" # SMTP 服务器
      - "${MAILDEV_WEB_PORT}:1080" # Web UI
    depends_on:
      postgres:
        condition: service_healthy

  # 对象存储服务
  minio:
    image: quay.io/minio/minio
    container_name: operatornext-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_API_PORT}:9000" # API
      - "${MINIO_CONSOLE_PORT}:9001" # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy

  # MinIO 初始化服务
  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc ls myminio/avatars > /dev/null 2>&1 || /usr/bin/mc mb myminio/avatars;
      /usr/bin/mc anonymous set public myminio/avatars;
      exit 0;
      "
  
  # Selenium Grid Hub
  selenium-hub:
    image: selenium/hub:latest
    container_name: operatornext-selenium-hub
    restart: unless-stopped
    ports:
      - "4444:4444"
    environment:
      - GRID_MAX_SESSION=16
      - GRID_TIMEOUT=300
      - GRID_BROWSER_TIMEOUT=300
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Selenium Chromium Node (替代Chrome，支持ARM64架构)
  selenium-chromium:
    image: selenium/node-chromium:latest
    container_name: operatornext-selenium-chromium
    platform: linux/arm64
    restart: unless-stopped
    shm_size: '2g'
    depends_on:
      selenium-hub:
        condition: service_started
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
      - SE_NODE_SESSION_TIMEOUT=300
      - SE_VNC_NO_PASSWORD=1
    ports:
      - "7900:7900"  # VNC 可视化界面端口
    volumes:
      - /dev/shm:/dev/shm

  # Selenium Firefox Node
  selenium-firefox:
    image: selenium/node-firefox:latest
    container_name: operatornext-selenium-firefox
    platform: linux/arm64
    restart: unless-stopped
    shm_size: '2g'
    depends_on:
      selenium-hub:
        condition: service_started
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
      - SE_NODE_SESSION_TIMEOUT=300
      - SE_VNC_NO_PASSWORD=1
    ports:
      - "7901:7900"  # VNC 可视化界面端口
    volumes:
      - /dev/shm:/dev/shm

  # Selenium Edge Node - 目前在ARM架构(如M1/M2 Mac)上不可用
  # 如果需要Edge浏览器支持，请在x86_64架构机器上使用，或等待官方支持ARM
  # selenium-edge:
  #   image: selenium/node-edge:4.29.0-20250222
  #   container_name: operatornext-selenium-edge
  #   restart: unless-stopped
  #   platform: linux/amd64  # 尝试指定平台，需要Docker启用模拟
  #   shm_size: '2g'
  #   depends_on:
  #     selenium-hub:
  #       condition: service_started
  #   environment:
  #     - SE_EVENT_BUS_HOST=selenium-hub
  #     - SE_EVENT_BUS_PUBLISH_PORT=4442
  #     - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
  #     - SE_NODE_MAX_SESSIONS=4
  #     - SE_NODE_OVERRIDE_MAX_SESSIONS=true
  #     - SE_NODE_SESSION_TIMEOUT=300
  #     - SE_VNC_NO_PASSWORD=1
  #   ports:
  #     - "7902:7900"  # VNC 可视化界面端口
  #   volumes:
  #     - /dev/shm:/dev/shm

networks:
  default:
    name: operatornext-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.168.0/24

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME}
  minio_data:
    name: ${MINIO_VOLUME_NAME}
  browserless-data:
    name: operatornext-browserless-data
    driver: local
  vm_data:
    name: operatornext-vm-data
    driver: local
  selenium-data:
    name: operatornext-selenium-data
    driver: local
